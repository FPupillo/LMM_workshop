# plot
ggplot(df, aes(y=RT, x = PE))+
geom_smooth(method="lm")+aes(colour = factor(subj_id))+
geom_smooth(method="lm", colour="black", se=T)+
geom_ribbon(aes(x=PE, y=RT, ymax=RT+ dat_summary$se, ymin=RT+ dat_summary$se),
alpha=0.2)
# plot
ggplot(df, aes(y=RT, x = PE))+
geom_smooth(method="lm")+aes(colour = factor(subj_id))+
geom_smooth(method="lm", colour="black", se=T)
?geom_ribbon
?geom_smooth
# plot
ggplot(df, aes(y=RT, x = PE))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
geom_smooth(method="lm", colour="black", se=T)
# plot
ggplot(df, aes(y=RT, x = PE))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
geom_smooth(method="lm", colour="black", se=T)+
geom_ribbon(aes(x=PE, y=RT, ymax=RT+ dat_summary$se, ymin=RT+ dat_summary$se),
alpha=0.2)
# plot
ggplot(df, aes(y=RT, x = PE))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
geom_smooth(method="lm", colour="black", se=T)+
geom_ribbon(aes(x=PE, y=RT, ymax=RT+ dat_summary$se, ymin=RT+ dat_summary$se),
alpha=0.2, colour=NULL)
# plot
ggplot(df, aes(y=RT, x = PE))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
geom_smooth(method="lm", colour="black", se=T)+
geom_ribbon(aes(x=PE, y=RT, ymax=RT+ dat_summary$se, ymin=RT+ dat_summary$se),
alpha=0.2, colour=NULL)
# plot
ggplot(df, aes(y=RT, x = PE))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
geom_smooth(method="lm", colour="black", se=T)+
geom_ribbon(aes(x=PE, y=RT, ymax=RT+ dat_summary$se, ymin=RT+ dat_summary$se),
alpha=0.2)
# plot
ggplot(df, aes(y=RT, x = PE))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
geom_smooth(method="lm", colour="black", se=T)+
geom_smooth(aes(x=PE, y=RT, ymax=RT+ dat_summary$se, ymin=RT+ dat_summary$se),
alpha=0.2)
# plot
ggplot(df, aes(y=RT, x = PE))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
geom_smooth(method="lm", colour="black", se=T)+
geom_smooth(aes(x=PE, y=RT, ymax=RT+ dat_summary$se, ymin=RT+ dat_summary$se),
alpha=0.2)
# plot
ggplot(df, aes(y=RT, x = PE))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
#geom_smooth(method="lm", colour="black", se=T)+
geom_smooth(aes(x=PE, y=RT, ymax=RT+ dat_summary$se, ymin=RT+ dat_summary$se),
alpha=0.2)+
ylim(c(-13, 13))
# plot
ggplot(df, aes(y=RT, x = PE))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
#geom_smooth(method="lm", colour="black", se=T)+
geom_smooth(aes(x=PE, y=RT, ymax=RT+ dat_summary$ci, ymin=RT+ dat_summary$ci),
alpha=0.2)+
ylim(c(-13, 13))
# plot
ggplot(df, aes(y=RT, x = PE))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
#geom_smooth(method="lm", colour="black", se=T)+
geom_ribbon(aes(x=PE, y=RT, ymax=RT+ dat_summary$ci, ymin=RT+ dat_summary$ci),
alpha=0.2)+
ylim(c(-13, 13))
# plot
ggplot(df, aes(y=RT, x = PE))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
#geom_smooth(method="lm", colour="black", se=T)+
geom_ribbon(aes(x=PE, y=RT, ymax=RT+ dat_summary$ci, ymin=RT+ dat_summary$ci), fill=-"grey70",
alpha=0.2)+
ylim(c(-13, 13))
# plot
ggplot(df, aes(y=RT, x = PE))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
#geom_smooth(method="lm", colour="black", se=T)+
geom_ribbon(aes(x=PE, y=RT, ymax=RT+ dat_summary$ci, ymin=RT+ dat_summary$ci), fill="grey70",
alpha=0.2)+
ylim(c(-13, 13))
# plot
ggplot(df, aes(y=RT, x = PE))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
#geom_smooth(method="lm", colour="black", se=T)+
geom_ribbon(aes(x=PE, y=RT, ymax=RT+ dat_summary$ci, ymin=RT+ dat_summary$ci),
alpha=0.2)+
ylim(c(-13, 13))
# grand mean centring and person mean centring
df<- df %<%
mutate (PE.gmc = PE-mean(PE)) %>%
group_by(subj_id) %<%
mutate(PE.cm = mean(PE),
PE.pmc = PE-PE.cm )
# grand mean centring and person mean centring
df<- df %<%
mutate (PE.gmc = PE-mean(PE)) %>%
group_by(subj_id) %>%
mutate(PE.cm = mean(PE),
PE.pmc = PE-PE.cm )
# grand mean centring and person mean centring
df<- df %>%
mutate (PE.gmc = PE-mean(PE)) %>%
group_by(subj_id) %>%
mutate(PE.cm = mean(PE),
PE.pmc = PE-PE.cm )
# plot
ggplot(df, aes(y=RT, x = PEcm))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
#geom_smooth(method="lm", colour="black", se=T)+
geom_ribbon(aes(x=PEcm, y=RT, ymax=RT+ dat_summary$ci, ymin=RT+ dat_summary$ci),
alpha=0.2)+
ylim(c(-13, 13))
# plot
ggplot(df, aes(y=RT, x = PE.cm))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
#geom_smooth(method="lm", colour="black", se=T)+
geom_ribbon(aes(x=PE.cm, y=RT, ymax=RT+ dat_summary$ci, ymin=RT+ dat_summary$ci),
alpha=0.2)+
ylim(c(-13, 13))
View(df)
# grand mean centring and person mean centring
df<- df %>%
mutate (PE.gmc = PE-mean(PE)) %>%
group_by(subj_id) %>%
mutate(PE.cm = mean(PE),
PE.pmc = PE-PE.cm )%>%
ungroup %>%
dat_summary <- summarySEwithin(df, measurevar = "RT",
withinvars = c("item_id"),
idvar = "subj_id")
# grand mean centring and person mean centring
df<- df %>%
# Grand mean centering (GMC)
mutate (PE.gmc = PE-mean(PE)) %>%
# Person mean centering (centering withing clusters - Participants)
group_by(subj_id) %>%
mutate(PE.cm = mean(PE),
PE.cwc = PE-PE.cm ) %>%
ungroup %>%
# grand mean centering of the aggregated variable
mutate(PE.cmc= PE.cm-(PE.cm))
View(df)
# grand mean centring and person mean centring
df<- df %>%
# Grand mean centering (GMC)
mutate (PE.gmc = PE-mean(PE)) %>%
# Person mean centering (centering withing clusters - Participants)
group_by(subj_id) %>%
mutate(PE.cm = mean(PE),
PE.cwc = PE-PE.cm ) %>%
ungroup %>%
# grand mean centering of the aggregated variable
mutate(PE.cmc= PE.cm-mean(PE.cm))
View(df)
View(df)
# grand mean centring and person mean centring
df<- df %>%
# Grand mean centering (GMC)
mutate (PE.gmc = PE-mean(PE)) %>%
# Person mean centering (centering withing clusters - Participants)
group_by(subj_id) %>%
mutate(PE.cm = mean(PE.cm),
PE.cwc = PE-PE.cm ) %>%
ungroup %>%
# grand mean centering of the aggregated variable
mutate(PE.cmc= PE.cm-mean(PE.cm))
View(df)
View(df)
df <- df[, 1:8]
# grand mean centring and person mean centring
df<- df %>%
# Grand mean centering (GMC)
mutate (PE.gmc = PE-mean(PE)) %>%
# Person mean centering (centering withing clusters - Participants)
group_by(subj_id) %>%
mutate(PE.cm = mean(PE),
PE.cwc = PE-PE.cm ) %>%
ungroup %>%
# grand mean centering of the aggregated variable
mutate(PE.cmc= PE.cm-mean(PE.cm))
View(df)
knitr::opts_chunk$set(echo = TRUE)
# load the packages and source functions
library(dplyr)
library(ggplot2)
library(lme4)
library(lmerTest)
library(RLRsim)
source("helper_functions/simulateData.R")
# suppress scientific notation
options(scipen=5)
# set.seed
set.seed(1234)
df<-my_sim_data(
SubN = 30,
beta_0 = 0.60, # grand mean (fixed intercept)
PEmean = 0.30,# PEmean
beta_PE = 1.28, # effect of PE (fixed slope)
n_items = 300, # number of trials
tau_0 = 1.80, # by-subject random intercept sd .Check if it is sd, because than it will be squared into variance
tau_1 = 2.50, # by-subject random slope sd
rho = 0.3, # correlation between intercept and slope
sigma = 0.3, # residual standard deviation
RTorACC = 1 # Reaction times or accuracy (1 = RT, 2 = accuracy)
)
# show first row of simulated data
head(df)
df_agg<-df %>%
group_by(subj_id) %>%
summarise(RT=mean(RT), PE=mean(PE))
# plot
ggplot(df_agg, aes(y=RT, x = PE))+
geom_point()+
geom_smooth(method="lm")
linearmod<-lm(RT~PE, data = df_agg)
summary(linearmod)
#linearmod<-lmer(RT~PE+(1+PE|subj_id), data = df)
# get f value
summary.aov(linearmod)
# first, let's run an intercept only, unconditional model
mixmod_unc<-lmer(RT~1+(1|subj_id), data = df, control=lmerControl(optimizer="bobyqa"))#,optCtrl=list(maxfun=100000)))
summary(mixmod_unc)
# test significance
# model without random intercept. We can create a random intercept that is constant at 1
df$constint<-rep(1, nrow(df))
mod_unc<-lm(RT~1, data=df)
mixmod_unc<-lmer(RT~1+(1|subj_id), data = df)
anova(mixmod_unc, mod_unc)
# grand mean centring and person mean centring
df<- df %>%
# Grand mean centering (GMC)
mutate (PE.gmc = PE-mean(PE)) %>%
# Person mean centering (centering withing clusters - Participants)
group_by(subj_id) %>%
mutate(PE.cm = mean(PE),
PE.cwc = PE-PE.cm ) %>%
ungroup %>%
# grand mean centering of the aggregated variable
mutate(PE.cmc= PE.cm-mean(PE.cm))
View(df)
# plot
ggplot(df, aes(y=RT, x = PE.cwc))+
#geom_smooth(method="lm")+aes(colour = factor(subj_id))+
#geom_smooth(method="lm", colour="black", se=T)+
geom_ribbon(aes(x=PE.cm, y=RT, ymax=RT+ dat_summary$ci, ymin=RT+ dat_summary$ci),
alpha=0.2)+
ylim(c(-13, 13))
# plot
ggplot(df, aes(y=RT, x = PE.cwc))+
geom_smooth(method="lm")+aes(colour = factor(subj_id))+
#geom_smooth(method="lm", colour="black", se=T)+
# geom_ribbon(aes(x=PE.cwc, y=RT, ymax=RT+ dat_summary$ci, ymin=RT+ dat_summary$ci),
#   alpha=0.2)+
ylim(c(-13, 13))
source('~/PowerFolders/Frankfurt_University/LMM_workshop/helper_functions/simulateData.R', echo=TRUE)
# set.seed
set.seed(1234)
df<-my_sim_data(
SubN = 30,
beta_0 = 0.60, # grand mean (fixed intercept)
PEmean = 0.30,# PEmean
beta_PE = 1.28, # effect of PE (fixed slope)
n_items = 300, # number of trials
tau_0 = 1.80, # by-subject random intercept sd .Check if it is sd, because than it will be squared into variance
tau_1 = 2.50, # by-subject random slope sd
rho = 0.3, # correlation between intercept and slope
sigma = 0.3, # residual standard deviation
RTorACC = 1 # Reaction times or accuracy (1 = RT, 2 = accuracy)
)
# show first row of simulated data
head(df)
df_agg<-df %>%
group_by(subj_id) %>%
summarise(RT=mean(RT), PE=mean(PE))
# plot
ggplot(df_agg, aes(y=RT, x = PE))+
geom_point()+
geom_smooth(method="lm")
linearmod<-lm(RT~PE, data = df_agg)
summary(linearmod)
#linearmod<-lmer(RT~PE+(1+PE|subj_id), data = df)
# get f value
summary.aov(linearmod)
# first, let's run an intercept only, unconditional model
mixmod_unc<-lmer(RT~1+(1|subj_id), data = df, control=lmerControl(optimizer="bobyqa"))#,optCtrl=list(maxfun=100000)))
summary(mixmod_unc)
# plot
ggplot(df, aes(y=RT, x = PE))+
geom_smooth(method="lm")+aes(colour = factor(subj_id))+
#geom_smooth(method="lm", colour="black", se=T)+
# geom_ribbon(aes(x=PE.cwc, y=RT, ymax=RT+ dat_summary$ci, ymin=RT+ dat_summary$ci),
#   alpha=0.2)+
ylim(c(-13, 13))
maxMod<-lmer(RT~PE+(1+PE|subj_id), data = df, control=lmerControl(optimizer="bobyqa"))
maxMod<-lmer(RT~PE+(1+PE|subj_id), data = df, control=lmerControl(optimizer="bobyqa"))
summary(maxMod)
library(Rmisc)
dat_summary <- summarySEwithin(df, measurevar = "RT",
withinvars = c("item_id"),
idvar = "subj_id")
# plot
ggplot(df, aes(y=RT, x = PE))+
library(Rmisc)
# grand mean centring and person mean centring
df<- df %>%
# Grand mean centering (GMC)
mutate (PE.gmc = PE-mean(PE)) %>%
# Person mean centering (centering withing clusters - Participants)
group_by(subj_id) %>%
mutate(PE.cm = mean(PE),
PE.cwc = PE-PE.cm ) %>%
ungroup %>%
# grand mean centering of the aggregated variable
mutate(PE.cmc= PE.cm-mean(PE.cm))
dat_summary <- summarySEwithin(df, measurevar = "RT",
withinvars = c("item_id"),
idvar = "subj_id")
# plot
ggplot(df, aes(y=RT, x = PE))+
geom_smooth(method="lm")+aes(colour = factor(subj_id))+
#geom_smooth(method="lm", colour="black", se=T)+
geom_ribbon(aes(x=PE.cwc, y=RT, ymax=RT+ dat_summary$ci, ymin=RT+ dat_summary$ci),
alpha=0.2)+
ylim(c(-13, 13))
#geom_smooth(method="lm")
maxMod<-lmer(RT~PE+(1+PE|subj_id), data = df, control=lmerControl(optimizer="bobyqa"))
summary(maxMod)
# plot
ggplot(df, aes(y=RT, x = PE))+
geom_smooth(method="lm")+aes(colour = factor(subj_id))+
#geom_smooth(method="lm", colour="black", se=T)+
#geom_ribbon(aes(x=PE.cwc, y=RT, ymax=RT+ dat_summary$ci, ymin=RT+ dat_summary$ci),
# alpha=0.2)+
ylim(c(-13, 13))
source('~/PowerFolders/Frankfurt_University/LMM_workshop/helper_functions/simulateData.R', echo=TRUE)
maxMod<-lmer(RT~PE+(1+PE|subj_id), data = df, control=lmerControl(optimizer="bobyqa"))
maxMod<-lmer(RT~PE+(1+PE|subj_id), data = df, control=lmerControl(optimizer="bobyqa"))
knitr::opts_chunk$set(echo = TRUE)
# load the packages and source functions
library(dplyr)
library(ggplot2)
library(lme4)
library(lmerTest)
library(RLRsim)
source("helper_functions/simulateData.R")
# suppress scientific notation
options(scipen=5)
# set.seed
set.seed(1234)
df<-my_sim_data(
SubN = 30,
beta_0 = 0.60, # grand mean (fixed intercept)
PEmean = 0.30,# PEmean
beta_PE = 1.28, # effect of PE (fixed slope)
n_items = 300, # number of trials
tau_0 = 1.80, # by-subject random intercept sd .Check if it is sd, because than it will be squared into variance
tau_1 = 2.50, # by-subject random slope sd
rho = 0.3, # correlation between intercept and slope
sigma = 0.3, # residual standard deviation
RTorACC = 1 # Reaction times or accuracy (1 = RT, 2 = accuracy)
)
# show first row of simulated data
head(df)
df_agg<-df %>%
group_by(subj_id) %>%
summarise(RT=mean(RT), PE=mean(PE))
# plot
ggplot(df_agg, aes(y=RT, x = PE))+
geom_point()+
geom_smooth(method="lm")
linearmod<-lm(RT~PE, data = df_agg)
summary(linearmod)
#linearmod<-lmer(RT~PE+(1+PE|subj_id), data = df)
# get f value
summary.aov(linearmod)
# first, let's run an intercept only, unconditional model
mixmod_unc<-lmer(RT~1+(1|subj_id), data = df, control=lmerControl(optimizer="bobyqa"))#,optCtrl=list(maxfun=100000)))
summary(mixmod_unc)
# test significance
# model without random intercept. We can create a random intercept that is constant at 1
df$constint<-rep(1, nrow(df))
mod_unc<-lm(RT~1, data=df)
mixmod_unc<-lmer(RT~1+(1|subj_id), data = df)
anova(mixmod_unc, mod_unc)
# use simulation based-test
exactLRT(mixmod_unc,mod_unc)
maxMod<-lmer(RT~PE+(1+PE|subj_id), data = df, control=lmerControl(optimizer="bobyqa"))
plot(maxmod)
plot(maxMod*
plot(maxMod)
plot(maxMod)
df_agg<-df %>%
group_by(subj_id) %>%
summarise(RT=mean(RT), PE=mean(PE))
# plot
ggplot(df_agg, aes(y=RT, x = PE))+
geom_point()+
geom_smooth(method="lm")
linearmod<-lm(RT~PE, data = df_agg)
summary(linearmod)
#linearmod<-lmer(RT~PE+(1+PE|subj_id), data = df)
# get f value
summary.aov(linearmod)
detach("Rmisc")
detach(Rmisc)
detach("package:Rmisc", unload = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# load the packages and source functions
library(dplyr)
library(ggplot2)
library(lme4)
library(lmerTest)
library(RLRsim)
source("helper_functions/simulateData.R")
# suppress scientific notation
options(scipen=5)
# set.seed
set.seed(1234)
df<-my_sim_data(
SubN = 30,
beta_0 = 0.60, # grand mean (fixed intercept)
PEmean = 0.30,# PEmean
beta_PE = 1.28, # effect of PE (fixed slope)
n_items = 300, # number of trials
tau_0 = 1.80, # by-subject random intercept sd .Check if it is sd, because than it will be squared into variance
tau_1 = 2.50, # by-subject random slope sd
rho = 0.3, # correlation between intercept and slope
sigma = 0.3, # residual standard deviation
RTorACC = 1 # Reaction times or accuracy (1 = RT, 2 = accuracy)
)
# show first row of simulated data
head(df)
df_agg<-df %>%
group_by(subj_id) %>%
summarise(RT=mean(RT), PE=mean(PE))
# plot
ggplot(df_agg, aes(y=RT, x = PE))+
geom_point()+
geom_smooth(method="lm")
linearmod<-lm(RT~PE, data = df_agg)
summary(linearmod)
#linearmod<-lmer(RT~PE+(1+PE|subj_id), data = df)
# get f value
summary.aov(linearmod)
library(nlme)
knitr::opts_chunk$set(echo = TRUE)
# try nlme
test.lme<-lme(RT~PE_level,
random = ~ (PE_level) | subj_id,
data = df,
method = "REML",
control= lmeControl( opt = "optim", optimMethod ="BFGS" ))
# try nlme
test.lme<-lme(RT~PElevel,
random = ~ (PE_level) | subj_id,
data = df,
method = "REML",
control= lmeControl( opt = "optim", optimMethod ="BFGS" ))
# try nlme
test.lme<-lme(RT~PElevel,
random = ~ (PElevel) | subj_id,
data = df,
method = "REML",
control= lmeControl( opt = "optim", optimMethod ="BFGS" ))
summary(test.lme)
Anova(test.lme)
anova(test.lme)
summary(test.lme)
library(lmerTest)
# try nlme
test.lme<-lme(RT~PElevel,
random = ~ (PElevel) | subj_id,
data = df,
method = "REML",
control= lmeControl( opt = "optim", optimMethod ="BFGS" ))
summary(test.lme)
# try nlme
test.lme<-lme(RT~PElevel,
random = ~un (PElevel) | subj_id,
data = df,
method = "REML",
control= lmeControl( opt = "optim", optimMethod ="BFGS" ))
# try nlme
test.lme<-lme(fixed = RT~PElevel,
random = ~ un (PElevel) | subj_id,
data = df,
method = "REML",
control= lmeControl( opt = "optim", optimMethod ="BFGS" ))
# try nlme
test.lme<-lme(fixed = RT~PElevel,
random = ~ PElevel | subj_id,
data = df,
method = "REML",
control= lmeControl( opt = "optim", optimMethod ="BFGS" ))
summary(test.lme)
test.lme
library(lmerTest)
summary(test.lme)
# try nlme
test.lme<-lme(fixed = RT~PElevel,
random = ~ PElevel | subj_id,
data = df,
method = "REML",
control= lmeControl( opt = "optim", optimMethod ="BFGS" ))
summary(test.lme)
