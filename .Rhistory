#autocorrelation
#generate a matrix
#read https://stats.stackexchange.com/questions/183406/how-to-generate-series-of-pseudorandom-autocorrelated-numbers for a reference
tmp.r <- matrix(0.1, n_items, n_items)
tmp.r <-tmp.r^abs(row(tmp.r)-col(tmp.r))
# total number of items = n_ingroup + n_outgroup
items <- data.frame(
#item_id = seq_len(n_items), PE = MASS::mvrnorm(1, rep(PEmean,n_items), tmp.r) # the autocorrelation is between 3 consecutiive assessments
# item_id = seq_len(n_items), PE = rtmvnorm(n=n_items, mean = rep(PEmean,n_items),
#                                 lower=rep(-1,n_items),
#                                 upper=rep(1, n_items)) # the autocorrelation is between 3 consecutiive assessments
item_id = seq_len(n_items), PE = rtruncnorm(n_items, a = -1, b=1, mean=PEmean, sd=0.5)
)
# variance-covariance matrix
cov_mx <- matrix(
c(tau_0^2, rho * tau_0 * tau_1,
rho * tau_0 * tau_1, tau_1^2 ),
nrow = 2, byrow = TRUE)
subjects <- data.frame(subj_id = seq_len(SubN),
MASS::mvrnorm(n = SubN,
mu = c(T_0s = 0, T_1s = 0),
Sigma = cov_mx))
trials<- crossing(subjects, items) %>%
mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma))# %>%
# add random noise
for (n in 1:nrow(trials)){
trials$PE[n]<-trials$PE[n]+rnorm(1)
}
if (RTorACC==1){
dat_sim<- trials %>%
mutate(RT = beta_0 + T_0s + (beta_PE + T_1s)*PE  + e_si)# %>%
# add the smallest value to make it positive (absolute number)
#dat_sim$RT<-dat_sim$RT+abs(min(dat_sim$RT))
# hist(dat_sim$RT)
#dat_sim$RT<-dexp(dat_sim$RT, rate=0.25)
# add 500 ms
#dat_sim$RT<-dat_sim$RT+0.5
#dat_sim$RT<-dsn(dat_sim$RT, xi=1, omega=6, alpha=5)
#hist(dat_sim$RT)
} else{
dat_sim<- trials %>%
mutate(rec_acc = beta_0 + T_0s + (beta_PE + T_1s)*PE  + e_si)
# convert the log odds into proportions
# read https://aosmith.rbind.io/2020/08/20/simulate-binomial-glmm/#a-single-simulation-for-a-binomial-glmm for a referencep
simData$rec_acc  <-plogis(simData$rec_acc)
# convert into binomial
for (n in 1:nrow(simData)){
simData$rec_acc[n]<-rbinom(1, 1, prob = simData$rec_acc[n])
}
}
View(dat_sim)
View(trials)
rm(trial)
rm(trials)
rm(dat_sim)
# total number of items = n_ingroup + n_outgroup
items <- data.frame(
#item_id = seq_len(n_items), PE = MASS::mvrnorm(1, rep(PEmean,n_items), tmp.r) # the autocorrelation is between 3 consecutiive assessments
# item_id = seq_len(n_items), PE = rtmvnorm(n=n_items, mean = rep(PEmean,n_items),
#                                 lower=rep(-1,n_items),
#                                 upper=rep(1, n_items)) # the autocorrelation is between 3 consecutiive assessments
item_id = seq_len(n_items), PE = rtruncnorm(n_items, a = -1, b=1, mean=PEmean, sd=0.5)
)
# variance-covariance matrix
cov_mx <- matrix(
c(tau_0^2, rho * tau_0 * tau_1,
rho * tau_0 * tau_1, tau_1^2 ),
nrow = 2, byrow = TRUE)
View(items)
subjects <- data.frame(subj_id = seq_len(SubN),
MASS::mvrnorm(n = SubN,
mu = c(T_0s = 0, T_1s = 0),
Sigma = cov_mx))
trials<- crossing(subjects, items) %>%
mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma))# %>%
View(trials)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
source('~/PowerFolders/Frankfurt_University/LMM_workshop/helper_functions/simulateData.R', echo=TRUE)
# set.seed
set.seed(1234)
df<-my_sim_data(
SubN = 30,
beta_0 = 1.28, # grand mean (fixed intercept)
PEmean = 0.30,# PEmean
beta_PE = 0.55, # effect of PE (fixed slope)
n_items = 300, # number of trials
tau_0 = 1.80, # by-subject random intercept sd .Check if it is sd, because than it will be squared into variance
tau_1 = 0.5, # by-subject random slope sd
rho = 0.3, # correlation between intercept and slope
sigma = 0.3, # residual standard deviation
RTorACC = 1 # Reaction times or accuracy (1 = RT, 2 = accuracy)
)
df_agg<-df %>%
group_by(subj_id) %>%
summarise(RT=mean(RT), PE=mean(PE))
View(df_agg)
runif()
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
(any(trials$PE>1 | any(trials$PE<-1)))
beta_0 = 1.28
SubN = 60,
PEmean = 0.30
beta_PE = -0.29
n_items = 300
SubN = 60
tau_0 = 1.80
tau_1 = 0.50
rho = 0.3
sigma = 0.3
RTorACC = 1
# total number of items = n_ingroup + n_outgroup
items <- data.frame(
#item_id = seq_len(n_items), PE = MASS::mvrnorm(1, rep(PEmean,n_items), tmp.r) # the autocorrelation is between 3 consecutiive assessments
# item_id = seq_len(n_items), PE = rtmvnorm(n=n_items, mean = rep(PEmean,n_items),
#                                 lower=rep(-1,n_items),
#                                 upper=rep(1, n_items)) # the autocorrelation is between 3 consecutiive assessments
item_id = seq_len(n_items), PE = rtruncnorm(n_items, a = -1, b=1, mean=PEmean, sd=0.5)
)
# variance-covariance matrix
cov_mx <- matrix(
c(tau_0^2, rho * tau_0 * tau_1,
rho * tau_0 * tau_1, tau_1^2 ),
nrow = 2, byrow = TRUE)
subjects <- data.frame(subj_id = seq_len(SubN),
MASS::mvrnorm(n = SubN,
mu = c(T_0s = 0, T_1s = 0),
Sigma = cov_mx))
trials<- crossing(subjects, items) %>%
mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma))# %>%
# add random noise
for (n in 1:nrow(trials)){
trials$PE[n]<-trials$PE[n]+rnorm(1)
}
while (any(trials$PE>1 | any(trials$PE<-1))){
for (n in 1:nrow(trials)){
trials$PE[n]<-trials$PE[n]+rnorm(1)
}
}
# total number of items = n_ingroup + n_outgroup
items <- data.frame(
#item_id = seq_len(n_items), PE = MASS::mvrnorm(1, rep(PEmean,n_items), tmp.r) # the autocorrelation is between 3 consecutiive assessments
# item_id = seq_len(n_items), PE = rtmvnorm(n=n_items, mean = rep(PEmean,n_items),
#                                 lower=rep(-1,n_items),
#                                 upper=rep(1, n_items)) # the autocorrelation is between 3 consecutiive assessments
item_id = seq_len(n_items), PE = rtruncnorm(n_items, a = -1, b=1, mean=PEmean+runif(), sd=0.5)
)
# total number of items = n_ingroup + n_outgroup
items <- data.frame(
#item_id = seq_len(n_items), PE = MASS::mvrnorm(1, rep(PEmean,n_items), tmp.r) # the autocorrelation is between 3 consecutiive assessments
# item_id = seq_len(n_items), PE = rtmvnorm(n=n_items, mean = rep(PEmean,n_items),
#                                 lower=rep(-1,n_items),
#                                 upper=rep(1, n_items)) # the autocorrelation is between 3 consecutiive assessments
item_id = seq_len(n_items), PE = rtruncnorm(n_items, a = -1, b=1, mean=PEmean+runif(1), sd=0.5)
)
source('~/PowerFolders/Frankfurt_University/LMM_workshop/helper_functions/simulateData.R', echo=TRUE)
# set.seed
set.seed(1234)
source('~/PowerFolders/Frankfurt_University/LMM_workshop/helper_functions/simulateData.R', echo=TRUE)
df<-my_sim_data(
SubN = 30,
beta_0 = 1.28, # grand mean (fixed intercept)
PEmean = 0.30,# PEmean
beta_PE = 0.55, # effect of PE (fixed slope)
n_items = 300, # number of trials
tau_0 = 1.80, # by-subject random intercept sd .Check if it is sd, because than it will be squared into variance
tau_1 = 0.5, # by-subject random slope sd
rho = 0.3, # correlation between intercept and slope
sigma = 0.3, # residual standard deviation
RTorACC = 1 # Reaction times or accuracy (1 = RT, 2 = accuracy)
)
df_agg<-df %>%
group_by(subj_id) %>%
summarise(RT=mean(RT), PE=mean(PE))
View(df_agg)
?rtruncnorm
# total number of items = n_ingroup + n_outgroup
items <- data.frame(
#item_id = seq_len(n_items), PE = MASS::mvrnorm(1, rep(PEmean,n_items), tmp.r) # the autocorrelation is between 3 consecutiive assessments
# item_id = seq_len(n_items), PE = rtmvnorm(n=n_items, mean = rep(PEmean,n_items),
#                                 lower=rep(-1,n_items),
#                                 upper=rep(1, n_items)) # the autocorrelation is between 3 consecutiive assessments
item_id = seq_len(n_items), PE = rtruncnorm(n_items, a = -1, b=1, mean=PEmean, sd=0.5)
)
SubN = 60
beta_0 = 1.28
PEmean = 0.30
beta_PE = -0.29
n_items = 300
tau_0 = 1.80
tau_1 = 0.50
rho = 0.3
sigma = 0.3
RTorACC = 1
# total number of items = n_ingroup + n_outgroup
items <- data.frame(
#item_id = seq_len(n_items), PE = MASS::mvrnorm(1, rep(PEmean,n_items), tmp.r) # the autocorrelation is between 3 consecutiive assessments
# item_id = seq_len(n_items), PE = rtmvnorm(n=n_items, mean = rep(PEmean,n_items),
#                                 lower=rep(-1,n_items),
#                                 upper=rep(1, n_items)) # the autocorrelation is between 3 consecutiive assessments
item_id = seq_len(n_items), PE = rtruncnorm(n_items, a = -1, b=1, mean=PEmean, sd=0.5)
)
View(items)
subjects <- data.frame(subj_id = seq_len(SubN),
MASS::mvrnorm(n = SubN,
mu = c(T_0s = 0, T_1s = 0),
Sigma = cov_mx))
# variance-covariance matrix
cov_mx <- matrix(
c(tau_0^2, rho * tau_0 * tau_1,
rho * tau_0 * tau_1, tau_1^2 ),
nrow = 2, byrow = TRUE)
subjects <- data.frame(subj_id = seq_len(SubN),
MASS::mvrnorm(n = SubN,
mu = c(T_0s = 0, T_1s = 0),
Sigma = cov_mx))
View(subjects)
trials<- crossing(subjects, items) %>%
mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma))# %>%
View(trials)
?crossing
rm(trials)
trials<-data.frame(pe=rep(rtruncnorm(n_items, a = -1, b=1, mean=PEmean, sd=0.), times=SubN))
View(trials)
trials<-data.frame(pe=rep(rtruncnorm(n_items, a = -1, b=1, mean=PEmean, sd=0.5), times=SubN))
View(trials)
trials<-data.frame(pe=rep(rtruncnorm(n_items, a = -1, b=1, mean=PEmean, sd=0.5), times=SubN), items_id = rep(1:n_items, times=SubN))
View(trials)
View(subjects)
View(items)
# total number of items = n_ingroup + n_outgroup
items <- data.frame(
#item_id = seq_len(n_items), PE = MASS::mvrnorm(1, rep(PEmean,n_items), tmp.r) # the autocorrelation is between 3 consecutiive assessments
# item_id = seq_len(n_items), PE = rtmvnorm(n=n_items, mean = rep(PEmean,n_items),
#                                 lower=rep(-1,n_items),
#                                 upper=rep(1, n_items)) # the autocorrelation is between 3 consecutiive assessments
item_id = seq_len(n_items)
#,
#PE = rtruncnorm(n_items, a = -1, b=1, mean=PEmean, sd=0.5)
)
trials<- crossing(subjects, items) %>%
mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma))# %>%
# total number of items = n_ingroup + n_outgroup
items <- data.frame(
#item_id = seq_len(n_items), PE = MASS::mvrnorm(1, rep(PEmean,n_items), tmp.r) # the autocorrelation is between 3 consecutiive assessments
# item_id = seq_len(n_items), PE = rtmvnorm(n=n_items, mean = rep(PEmean,n_items),
#                                 lower=rep(-1,n_items),
#                                 upper=rep(1, n_items)) # the autocorrelation is between 3 consecutiive assessments
item_id = seq_len(n_items)
#,
#PE = rtruncnorm(n_items, a = -1, b=1, mean=PEmean, sd=0.5)
)
# variance-covariance matrix
cov_mx <- matrix(
c(tau_0^2, rho * tau_0 * tau_1,
rho * tau_0 * tau_1, tau_1^2 ),
nrow = 2, byrow = TRUE)
subjects <- data.frame(subj_id = seq_len(SubN),
MASS::mvrnorm(n = SubN,
mu = c(T_0s = 0, T_1s = 0),
Sigma = cov_mx))
trials<- crossing(subjects, items) %>%
mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma))# %>%
View(trials)
trials$PE<-rep(rtruncnorm(n_items, a = -1, b=1, mean=PEmean, sd=0.5), times=SubN)
source('~/PowerFolders/Frankfurt_University/LMM_workshop/helper_functions/simulateData.R', echo=TRUE)
# set.seed
set.seed(1234)
df<-my_sim_data(
SubN = 30,
beta_0 = 1.28, # grand mean (fixed intercept)
PEmean = 0.30,# PEmean
beta_PE = 0.55, # effect of PE (fixed slope)
n_items = 300, # number of trials
tau_0 = 1.80, # by-subject random intercept sd .Check if it is sd, because than it will be squared into variance
tau_1 = 0.5, # by-subject random slope sd
rho = 0.3, # correlation between intercept and slope
sigma = 0.3, # residual standard deviation
RTorACC = 1 # Reaction times or accuracy (1 = RT, 2 = accuracy)
)
df<-my_sim_data(
SubN = 30,
beta_0 = 1.28, # grand mean (fixed intercept)
PEmean = 0.30,# PEmean
beta_PE = 0.55, # effect of PE (fixed slope)
n_items = 300, # number of trials
tau_0 = 1.80, # by-subject random intercept sd .Check if it is sd, because than it will be squared into variance
tau_1 = 0.5, # by-subject random slope sd
rho = 0.3, # correlation between intercept and slope
sigma = 0.3, # residual standard deviation
RTorACC = 1 # Reaction times or accuracy (1 = RT, 2 = accuracy)
)
# show first row of simulated data
head(df)
df_agg<-df %>%
group_by(subj_id) %>%
summarise(RT=mean(RT), PE=mean(PE))
View(df_agg)
?runif()
rnorm(1, min=0, max=1)
runif(1, min=0, max=1)
source('~/PowerFolders/Frankfurt_University/LMM_workshop/helper_functions/simulateData.R', echo=TRUE)
source('~/PowerFolders/Frankfurt_University/LMM_workshop/helper_functions/simulateData.R', echo=TRUE)
source('~/PowerFolders/Frankfurt_University/LMM_workshop/helper_functions/simulateData.R', echo=TRUE)
source('~/PowerFolders/Frankfurt_University/LMM_workshop/helper_functions/simulateData.R', echo=TRUE)
# set.seed
set.seed(1234)
df<-my_sim_data(
SubN = 30,
beta_0 = 1.28, # grand mean (fixed intercept)
PEmean = 0.30,# PEmean
beta_PE = 0.55, # effect of PE (fixed slope)
n_items = 300, # number of trials
tau_0 = 1.80, # by-subject random intercept sd .Check if it is sd, because than it will be squared into variance
tau_1 = 0.5, # by-subject random slope sd
rho = 0.3, # correlation between intercept and slope
sigma = 0.3, # residual standard deviation
RTorACC = 1 # Reaction times or accuracy (1 = RT, 2 = accuracy)
)
source('~/PowerFolders/Frankfurt_University/LMM_workshop/helper_functions/simulateData.R', echo=TRUE)
# set.seed
set.seed(1234)
df<-my_sim_data(
SubN = 30,
beta_0 = 1.28, # grand mean (fixed intercept)
PEmean = 0.30,# PEmean
beta_PE = 0.55, # effect of PE (fixed slope)
n_items = 300, # number of trials
tau_0 = 1.80, # by-subject random intercept sd .Check if it is sd, because than it will be squared into variance
tau_1 = 0.5, # by-subject random slope sd
rho = 0.3, # correlation between intercept and slope
sigma = 0.3, # residual standard deviation
RTorACC = 1 # Reaction times or accuracy (1 = RT, 2 = accuracy)
)
source('~/PowerFolders/Frankfurt_University/LMM_workshop/helper_functions/simulateData.R', echo=TRUE)
# set.seed
set.seed(1234)
df<-my_sim_data(
SubN = 30,
beta_0 = 1.28, # grand mean (fixed intercept)
PEmean = 0.30,# PEmean
beta_PE = 0.55, # effect of PE (fixed slope)
n_items = 300, # number of trials
tau_0 = 1.80, # by-subject random intercept sd .Check if it is sd, because than it will be squared into variance
tau_1 = 0.5, # by-subject random slope sd
rho = 0.3, # correlation between intercept and slope
sigma = 0.3, # residual standard deviation
RTorACC = 1 # Reaction times or accuracy (1 = RT, 2 = accuracy)
)
# show first row of simulated data
head(df)
SubN = 60,
beta_0 = 1.28
PEmean = 0.30
beta_PE = -0.29
n_items = 300
tau_0 = 1.80
tau_1 = 0.50
tau_1 = 0.50, # by-subject random slope sd
rho = 0.3
sigma = 0.3
RTorACC = 1
tau_1 = 0.50
# total number of items = n_ingroup + n_outgroup
items <- data.frame(
#item_id = seq_len(n_items), PE = MASS::mvrnorm(1, rep(PEmean,n_items), tmp.r) # the autocorrelation is between 3 consecutiive assessments
# item_id = seq_len(n_items), PE = rtmvnorm(n=n_items, mean = rep(PEmean,n_items),
#                                 lower=rep(-1,n_items),
#                                 upper=rep(1, n_items)) # the autocorrelation is between 3 consecutiive assessments
item_id = seq_len(n_items), PE = rtruncnorm(n_items, a = -0.5, b=0.5, mean=PEmean, sd=0.5)
)
# variance-covariance matrix
cov_mx <- matrix(
c(tau_0^2, rho * tau_0 * tau_1,
rho * tau_0 * tau_1, tau_1^2 ),
nrow = 2, byrow = TRUE)
subjects <- data.frame(subj_id = seq_len(SubN),
MASS::mvrnorm(n = SubN,
mu = c(T_0s = 0, T_1s = 0),
Sigma = cov_mx))
SubN = 60
# variance-covariance matrix
cov_mx <- matrix(
c(tau_0^2, rho * tau_0 * tau_1,
rho * tau_0 * tau_1, tau_1^2 ),
nrow = 2, byrow = TRUE)
subjects <- data.frame(subj_id = seq_len(SubN),
MASS::mvrnorm(n = SubN,
mu = c(T_0s = 0, T_1s = 0),
Sigma = cov_mx))
trials<- crossing(subjects, items) %>%
mutate(e_si = rnorm(nrow(.), mean = 0, sd = sigma))# %>%
View(trials)
# add random noise
# in order to keep the direction of PE, we are drawing the random noise from the uniform distribution
# if pe is <0, we make it more negative, otherwise, we make if more positive (adding or subtracting a number
# that is betwen 0 an d0.5)
for (n in 1:nrow(trials)){
if (trials$PE[n]<0){
trials$PE[n]<-trials$PE[n]-runif(1, min=0, max=0.5)
} else{
trials$PE[n]<-trials$PE[n]+runif(1, min=0, max=0.5)
}
}
View(trials)
beta_0
T_0s
dat_sim<- trials %>%
mutate(RT = beta_0 + T_0s + (beta_PE + T_1s)*PE  + e_si)# %>%
View(dat_sim)
source('~/PowerFolders/Frankfurt_University/LMM_workshop/helper_functions/simulateData.R', echo=TRUE)
source('~/PowerFolders/Frankfurt_University/LMM_workshop/helper_functions/simulateData.R', echo=TRUE)
# set.seed
set.seed(1234)
df<-my_sim_data(
SubN = 30,
beta_0 = 1.28, # grand mean (fixed intercept)
PEmean = 0.30,# PEmean
beta_PE = 0.55, # effect of PE (fixed slope)
n_items = 300, # number of trials
tau_0 = 1.80, # by-subject random intercept sd .Check if it is sd, because than it will be squared into variance
tau_1 = 0.5, # by-subject random slope sd
rho = 0.3, # correlation between intercept and slope
sigma = 0.3, # residual standard deviation
RTorACC = 1 # Reaction times or accuracy (1 = RT, 2 = accuracy)
)
df<-my_sim_data(
SubN = 30,
beta_0 = 1.28, # grand mean (fixed intercept)
PEmean = 0.30,# PEmean
beta_PE = 0.55, # effect of PE (fixed slope)
n_items = 300, # number of trials
tau_0 = 1.80, # by-subject random intercept sd .Check if it is sd, because than it will be squared into variance
tau_1 = 0.5, # by-subject random slope sd
rho = 0.3, # correlation between intercept and slope
sigma = 0.3, # residual standard deviation
RTorACC = 1 # Reaction times or accuracy (1 = RT, 2 = accuracy)
)
# show first row of simulated data
head(df)
df_agg<-df %>%
group_by(subj_id) %>%
summarise(RT=mean(RT), PE=mean(PE))
View(df_agg)
linearmod<-lm(RT~PE, data = df_agg)
summary(linearmod)
mixmod_unc<-lmer(RT~1+(1|subj_id), data = df)
mixmod_unc<-lmer(RT~1+(1|subj_id), data = df)
summary(mixmod_unc)
# test significance
# model without random intercept. We can create a random intercept that is constant at 1
df$constint<-rep(1, nrow(df))
mod_unc<-lm(RT~1+, data=df)
mod_unc<-lm(RT~1, data=df)
mixmod_unc<-lmer(RT~1+(1|subj_id), data = df)
anova(mixmod_unc, mod_unc)
# use simulation based-test
exactLRT(mixmod_unc,mod_unc)
mixmod_unc<-lmer(RT~PE+(1+PE|subj_id), data = df)
summary(mixmod_unc)
knitr::opts_chunk$set(echo = TRUE)
# plot
ggplot(df_agg, aes(y=PE, x = RT))+
geom_point()+
geom_smooth(method="lm")
df_agg<-df %>%
group_by(subj_id) %>%
summarise(RT=mean(RT), PE=mean(PE))
# plot
ggplot(df_agg, aes(y=PE, x = RT))+
geom_point()+
geom_smooth(method="lm")
linearmod<-lm(RT~PE, data = df_agg)
summary(linearmod)
#linearmod<-lmer(RT~PE+(1+PE|subj_id), data = df)
# get f value
summary.aov(linearmod)
# first, let's run an intercept only, unconditional model
mixmod_unc<-lmer(RT~1+(1|subj_id), data = df)
summary(mixmod_unc)
3.05/(3.05+0.28)
# test significance
# model without random intercept. We can create a random intercept that is constant at 1
df$constint<-rep(1, nrow(df))
mod_unc<-lm(RT~1, data=df)
mixmod_unc<-lmer(RT~1+(1|subj_id), data = df)
anova(mixmod_unc, mod_unc)
# use simulation based-test
exactLRT(mixmod_unc,mod_unc)
# use simulation based-test
exactLRT(mixmod_unc,mod_unc)
